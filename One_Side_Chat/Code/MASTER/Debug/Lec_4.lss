
Lec_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000640  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000026  00800060  00000640  000006d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000001  00800086  00800086  000006fa  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  000006fa  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  0000072c  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000208  00000000  00000000  00000768  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001eb6  00000000  00000000  00000970  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000c22  00000000  00000000  00002826  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ea7  00000000  00000000  00003448  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  0000053c  00000000  00000000  000042f0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    0000082b  00000000  00000000  0000482c  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001920  00000000  00000000  00005057  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000001a0  00000000  00000000  00006977  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 87 02 	jmp	0x50e	; 0x50e <__vector_12>
  34:	0c 94 ca 02 	jmp	0x594	; 0x594 <__vector_13>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 f4 02 	jmp	0x5e8	; 0x5e8 <__vector_15>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 e4       	ldi	r30, 0x40	; 64
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a6 38       	cpi	r26, 0x86	; 134
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a6 e8       	ldi	r26, 0x86	; 134
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a7 38       	cpi	r26, 0x87	; 135
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <main>
  8a:	0c 94 1e 03 	jmp	0x63c	; 0x63c <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <WriteInst>:
	DIO_WritePin(En,HIGH);
	_delay_ms(1);
	DIO_WritePin(En,LOW);
	_delay_ms(1);
	/****end of trigger***/
}
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
  96:	60 e0       	ldi	r22, 0x00	; 0
  98:	83 e0       	ldi	r24, 0x03	; 3
  9a:	0e 94 ef 01 	call	0x3de	; 0x3de <DIO_WritePin>
  9e:	6c 2f       	mov	r22, r28
  a0:	66 1f       	adc	r22, r22
  a2:	66 27       	eor	r22, r22
  a4:	66 1f       	adc	r22, r22
  a6:	8a e0       	ldi	r24, 0x0A	; 10
  a8:	0e 94 ef 01 	call	0x3de	; 0x3de <DIO_WritePin>
  ac:	c6 fb       	bst	r28, 6
  ae:	66 27       	eor	r22, r22
  b0:	60 f9       	bld	r22, 0
  b2:	8b e0       	ldi	r24, 0x0B	; 11
  b4:	0e 94 ef 01 	call	0x3de	; 0x3de <DIO_WritePin>
  b8:	c5 fb       	bst	r28, 5
  ba:	66 27       	eor	r22, r22
  bc:	60 f9       	bld	r22, 0
  be:	89 e0       	ldi	r24, 0x09	; 9
  c0:	0e 94 ef 01 	call	0x3de	; 0x3de <DIO_WritePin>
  c4:	c4 fb       	bst	r28, 4
  c6:	66 27       	eor	r22, r22
  c8:	60 f9       	bld	r22, 0
  ca:	88 e0       	ldi	r24, 0x08	; 8
  cc:	0e 94 ef 01 	call	0x3de	; 0x3de <DIO_WritePin>
  d0:	61 e0       	ldi	r22, 0x01	; 1
  d2:	84 e0       	ldi	r24, 0x04	; 4
  d4:	0e 94 ef 01 	call	0x3de	; 0x3de <DIO_WritePin>
  d8:	8f ec       	ldi	r24, 0xCF	; 207
  da:	97 e0       	ldi	r25, 0x07	; 7
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <WriteInst+0x4a>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <WriteInst+0x50>
  e2:	00 00       	nop
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	84 e0       	ldi	r24, 0x04	; 4
  e8:	0e 94 ef 01 	call	0x3de	; 0x3de <DIO_WritePin>
  ec:	8f ec       	ldi	r24, 0xCF	; 207
  ee:	97 e0       	ldi	r25, 0x07	; 7
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <WriteInst+0x5e>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <WriteInst+0x64>
  f6:	00 00       	nop
  f8:	c3 fb       	bst	r28, 3
  fa:	66 27       	eor	r22, r22
  fc:	60 f9       	bld	r22, 0
  fe:	8a e0       	ldi	r24, 0x0A	; 10
 100:	0e 94 ef 01 	call	0x3de	; 0x3de <DIO_WritePin>
 104:	c2 fb       	bst	r28, 2
 106:	66 27       	eor	r22, r22
 108:	60 f9       	bld	r22, 0
 10a:	8b e0       	ldi	r24, 0x0B	; 11
 10c:	0e 94 ef 01 	call	0x3de	; 0x3de <DIO_WritePin>
 110:	c1 fb       	bst	r28, 1
 112:	66 27       	eor	r22, r22
 114:	60 f9       	bld	r22, 0
 116:	89 e0       	ldi	r24, 0x09	; 9
 118:	0e 94 ef 01 	call	0x3de	; 0x3de <DIO_WritePin>
 11c:	6c 2f       	mov	r22, r28
 11e:	61 70       	andi	r22, 0x01	; 1
 120:	88 e0       	ldi	r24, 0x08	; 8
 122:	0e 94 ef 01 	call	0x3de	; 0x3de <DIO_WritePin>
 126:	61 e0       	ldi	r22, 0x01	; 1
 128:	84 e0       	ldi	r24, 0x04	; 4
 12a:	0e 94 ef 01 	call	0x3de	; 0x3de <DIO_WritePin>
 12e:	8f ec       	ldi	r24, 0xCF	; 207
 130:	97 e0       	ldi	r25, 0x07	; 7
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <WriteInst+0xa0>
 136:	00 c0       	rjmp	.+0      	; 0x138 <WriteInst+0xa6>
 138:	00 00       	nop
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	84 e0       	ldi	r24, 0x04	; 4
 13e:	0e 94 ef 01 	call	0x3de	; 0x3de <DIO_WritePin>
 142:	8f ec       	ldi	r24, 0xCF	; 207
 144:	97 e0       	ldi	r25, 0x07	; 7
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <WriteInst+0xb4>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <WriteInst+0xba>
 14c:	00 00       	nop
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <LCD_Init>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 152:	2f e7       	ldi	r18, 0x7F	; 127
 154:	88 e3       	ldi	r24, 0x38	; 56
 156:	91 e0       	ldi	r25, 0x01	; 1
 158:	21 50       	subi	r18, 0x01	; 1
 15a:	80 40       	sbci	r24, 0x00	; 0
 15c:	90 40       	sbci	r25, 0x00	; 0
 15e:	e1 f7       	brne	.-8      	; 0x158 <LCD_Init+0x6>
 160:	00 c0       	rjmp	.+0      	; 0x162 <LCD_Init+0x10>
 162:	00 00       	nop
void LCD_Init(void)
{
	_delay_ms(50);
	WriteInst(0x02);	/*send 2 in 4 bit mode*/
 164:	82 e0       	ldi	r24, 0x02	; 2
 166:	0e 94 49 00 	call	0x92	; 0x92 <WriteInst>
	WriteInst(0x28);	/*0X28 TO Initialize 4 bit  mode*/
 16a:	88 e2       	ldi	r24, 0x28	; 40
 16c:	0e 94 49 00 	call	0x92	; 0x92 <WriteInst>
	WriteInst(0x0c);	//0x0e for cursor ,,, 0x0f for cursor and blink
 170:	8c e0       	ldi	r24, 0x0C	; 12
 172:	0e 94 49 00 	call	0x92	; 0x92 <WriteInst>
	WriteInst(0x01);	/*clear screen*/
 176:	81 e0       	ldi	r24, 0x01	; 1
 178:	0e 94 49 00 	call	0x92	; 0x92 <WriteInst>
 17c:	8f ec       	ldi	r24, 0xCF	; 207
 17e:	97 e0       	ldi	r25, 0x07	; 7
 180:	01 97       	sbiw	r24, 0x01	; 1
 182:	f1 f7       	brne	.-4      	; 0x180 <LCD_Init+0x2e>
 184:	00 c0       	rjmp	.+0      	; 0x186 <LCD_Init+0x34>
 186:	00 00       	nop
	_delay_ms(1);
	WriteInst(0x06);	/*entry mode reg .. enable (increase address) and disable shift*/
 188:	86 e0       	ldi	r24, 0x06	; 6
 18a:	0e 94 49 00 	call	0x92	; 0x92 <WriteInst>
 18e:	08 95       	ret

00000190 <uartRxFun>:
	}
}
void uartRxFun(void)
{

	key2 = UART_Receive();
 190:	0e 94 bd 02 	call	0x57a	; 0x57a <UART_Receive>
 194:	80 93 86 00 	sts	0x0086, r24	; 0x800086 <__data_end>
	SPI_SendReceive(key2);
 198:	80 91 86 00 	lds	r24, 0x0086	; 0x800086 <__data_end>
 19c:	0e 94 82 02 	call	0x504	; 0x504 <SPI_SendReceive>
 1a0:	08 95       	ret

000001a2 <main>:
void uartRxFun(void);
volatile u8 key2;

int main(void)
{
	UART_RX_SetCallBack(uartRxFun);
 1a2:	88 ec       	ldi	r24, 0xC8	; 200
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	0e 94 c5 02 	call	0x58a	; 0x58a <UART_RX_SetCallBack>
	DIO_Init();
 1aa:	0e 94 df 01 	call	0x3be	; 0x3be <DIO_Init>
	LCD_Init();
 1ae:	0e 94 a9 00 	call	0x152	; 0x152 <LCD_Init>
	
	sei();
 1b2:	78 94       	sei
	UART_Init();
 1b4:	0e 94 b1 02 	call	0x562	; 0x562 <UART_Init>
	SPI_Init(MASTER);
 1b8:	80 e0       	ldi	r24, 0x00	; 0
 1ba:	0e 94 72 02 	call	0x4e4	; 0x4e4 <SPI_Init>
	UART_RX_InterruptEnable();
 1be:	0e 94 c1 02 	call	0x582	; 0x582 <UART_RX_InterruptEnable>
 1c2:	ff cf       	rjmp	.-2      	; 0x1c2 <main+0x20>

000001c4 <DIO_InitPin>:
	}
}

static void DIO_InitPin(DIO_Pin_type pin, DIO_PinStatus_type status)
{
	u8 pin_num = pin%8;
 1c4:	98 2f       	mov	r25, r24
 1c6:	97 70       	andi	r25, 0x07	; 7
	DIO_Port_type port = pin/8;
 1c8:	86 95       	lsr	r24
 1ca:	86 95       	lsr	r24
 1cc:	86 95       	lsr	r24
	switch(status)
 1ce:	61 30       	cpi	r22, 0x01	; 1
 1d0:	09 f4       	brne	.+2      	; 0x1d4 <DIO_InitPin+0x10>
 1d2:	55 c0       	rjmp	.+170    	; 0x27e <DIO_InitPin+0xba>
 1d4:	20 f0       	brcs	.+8      	; 0x1de <DIO_InitPin+0x1a>
 1d6:	62 30       	cpi	r22, 0x02	; 2
 1d8:	09 f4       	brne	.+2      	; 0x1dc <DIO_InitPin+0x18>
 1da:	a1 c0       	rjmp	.+322    	; 0x31e <DIO_InitPin+0x15a>
 1dc:	08 95       	ret
	{
		case OUTPUT:
		switch(port)
 1de:	81 30       	cpi	r24, 0x01	; 1
 1e0:	c1 f0       	breq	.+48     	; 0x212 <DIO_InitPin+0x4e>
 1e2:	28 f0       	brcs	.+10     	; 0x1ee <DIO_InitPin+0x2a>
 1e4:	82 30       	cpi	r24, 0x02	; 2
 1e6:	39 f1       	breq	.+78     	; 0x236 <DIO_InitPin+0x72>
 1e8:	83 30       	cpi	r24, 0x03	; 3
 1ea:	b9 f1       	breq	.+110    	; 0x25a <DIO_InitPin+0x96>
 1ec:	08 95       	ret
		{
			case PA:
			SET_BIT(DDRA,pin_num);
 1ee:	4a b3       	in	r20, 0x1a	; 26
 1f0:	21 e0       	ldi	r18, 0x01	; 1
 1f2:	30 e0       	ldi	r19, 0x00	; 0
 1f4:	b9 01       	movw	r22, r18
 1f6:	02 c0       	rjmp	.+4      	; 0x1fc <DIO_InitPin+0x38>
 1f8:	66 0f       	add	r22, r22
 1fa:	77 1f       	adc	r23, r23
 1fc:	9a 95       	dec	r25
 1fe:	e2 f7       	brpl	.-8      	; 0x1f8 <DIO_InitPin+0x34>
 200:	cb 01       	movw	r24, r22
 202:	94 2f       	mov	r25, r20
 204:	98 2b       	or	r25, r24
 206:	9a bb       	out	0x1a, r25	; 26
			CLEAR_BIT(PORTA,pin_num);
 208:	9b b3       	in	r25, 0x1b	; 27
 20a:	80 95       	com	r24
 20c:	89 23       	and	r24, r25
 20e:	8b bb       	out	0x1b, r24	; 27
			break;
 210:	08 95       	ret
			
			case PB:
			SET_BIT(DDRB,pin_num);
 212:	47 b3       	in	r20, 0x17	; 23
 214:	21 e0       	ldi	r18, 0x01	; 1
 216:	30 e0       	ldi	r19, 0x00	; 0
 218:	b9 01       	movw	r22, r18
 21a:	02 c0       	rjmp	.+4      	; 0x220 <DIO_InitPin+0x5c>
 21c:	66 0f       	add	r22, r22
 21e:	77 1f       	adc	r23, r23
 220:	9a 95       	dec	r25
 222:	e2 f7       	brpl	.-8      	; 0x21c <DIO_InitPin+0x58>
 224:	cb 01       	movw	r24, r22
 226:	94 2f       	mov	r25, r20
 228:	98 2b       	or	r25, r24
 22a:	97 bb       	out	0x17, r25	; 23
			CLEAR_BIT(PORTB,pin_num);
 22c:	98 b3       	in	r25, 0x18	; 24
 22e:	80 95       	com	r24
 230:	89 23       	and	r24, r25
 232:	88 bb       	out	0x18, r24	; 24
			break;
 234:	08 95       	ret
			
			case PC:
			SET_BIT(DDRC,pin_num);
 236:	44 b3       	in	r20, 0x14	; 20
 238:	21 e0       	ldi	r18, 0x01	; 1
 23a:	30 e0       	ldi	r19, 0x00	; 0
 23c:	b9 01       	movw	r22, r18
 23e:	02 c0       	rjmp	.+4      	; 0x244 <DIO_InitPin+0x80>
 240:	66 0f       	add	r22, r22
 242:	77 1f       	adc	r23, r23
 244:	9a 95       	dec	r25
 246:	e2 f7       	brpl	.-8      	; 0x240 <DIO_InitPin+0x7c>
 248:	cb 01       	movw	r24, r22
 24a:	94 2f       	mov	r25, r20
 24c:	98 2b       	or	r25, r24
 24e:	94 bb       	out	0x14, r25	; 20
			CLEAR_BIT(PORTC,pin_num);
 250:	95 b3       	in	r25, 0x15	; 21
 252:	80 95       	com	r24
 254:	89 23       	and	r24, r25
 256:	85 bb       	out	0x15, r24	; 21
			break;
 258:	08 95       	ret
			
			case PD:
			SET_BIT(DDRD,pin_num);
 25a:	41 b3       	in	r20, 0x11	; 17
 25c:	21 e0       	ldi	r18, 0x01	; 1
 25e:	30 e0       	ldi	r19, 0x00	; 0
 260:	b9 01       	movw	r22, r18
 262:	02 c0       	rjmp	.+4      	; 0x268 <DIO_InitPin+0xa4>
 264:	66 0f       	add	r22, r22
 266:	77 1f       	adc	r23, r23
 268:	9a 95       	dec	r25
 26a:	e2 f7       	brpl	.-8      	; 0x264 <DIO_InitPin+0xa0>
 26c:	cb 01       	movw	r24, r22
 26e:	94 2f       	mov	r25, r20
 270:	98 2b       	or	r25, r24
 272:	91 bb       	out	0x11, r25	; 17
			CLEAR_BIT(PORTD,pin_num);
 274:	92 b3       	in	r25, 0x12	; 18
 276:	80 95       	com	r24
 278:	89 23       	and	r24, r25
 27a:	82 bb       	out	0x12, r24	; 18
			break;
 27c:	08 95       	ret
		}
		break;
		
		case INFREE:
		switch(port)
 27e:	81 30       	cpi	r24, 0x01	; 1
 280:	c1 f0       	breq	.+48     	; 0x2b2 <DIO_InitPin+0xee>
 282:	28 f0       	brcs	.+10     	; 0x28e <DIO_InitPin+0xca>
 284:	82 30       	cpi	r24, 0x02	; 2
 286:	39 f1       	breq	.+78     	; 0x2d6 <DIO_InitPin+0x112>
 288:	83 30       	cpi	r24, 0x03	; 3
 28a:	b9 f1       	breq	.+110    	; 0x2fa <DIO_InitPin+0x136>
 28c:	08 95       	ret
		{
			case PA:
			CLEAR_BIT(DDRA,pin_num);
 28e:	4a b3       	in	r20, 0x1a	; 26
 290:	21 e0       	ldi	r18, 0x01	; 1
 292:	30 e0       	ldi	r19, 0x00	; 0
 294:	b9 01       	movw	r22, r18
 296:	02 c0       	rjmp	.+4      	; 0x29c <DIO_InitPin+0xd8>
 298:	66 0f       	add	r22, r22
 29a:	77 1f       	adc	r23, r23
 29c:	9a 95       	dec	r25
 29e:	e2 f7       	brpl	.-8      	; 0x298 <DIO_InitPin+0xd4>
 2a0:	cb 01       	movw	r24, r22
 2a2:	80 95       	com	r24
 2a4:	94 2f       	mov	r25, r20
 2a6:	98 23       	and	r25, r24
 2a8:	9a bb       	out	0x1a, r25	; 26
			CLEAR_BIT(PORTA,pin_num);
 2aa:	9b b3       	in	r25, 0x1b	; 27
 2ac:	89 23       	and	r24, r25
 2ae:	8b bb       	out	0x1b, r24	; 27
			break;
 2b0:	08 95       	ret
			
			case PB:
			CLEAR_BIT(DDRB,pin_num);
 2b2:	47 b3       	in	r20, 0x17	; 23
 2b4:	21 e0       	ldi	r18, 0x01	; 1
 2b6:	30 e0       	ldi	r19, 0x00	; 0
 2b8:	b9 01       	movw	r22, r18
 2ba:	02 c0       	rjmp	.+4      	; 0x2c0 <DIO_InitPin+0xfc>
 2bc:	66 0f       	add	r22, r22
 2be:	77 1f       	adc	r23, r23
 2c0:	9a 95       	dec	r25
 2c2:	e2 f7       	brpl	.-8      	; 0x2bc <DIO_InitPin+0xf8>
 2c4:	cb 01       	movw	r24, r22
 2c6:	80 95       	com	r24
 2c8:	94 2f       	mov	r25, r20
 2ca:	98 23       	and	r25, r24
 2cc:	97 bb       	out	0x17, r25	; 23
			CLEAR_BIT(PORTB,pin_num);
 2ce:	98 b3       	in	r25, 0x18	; 24
 2d0:	89 23       	and	r24, r25
 2d2:	88 bb       	out	0x18, r24	; 24
			break;
 2d4:	08 95       	ret
			
			case PC:
			CLEAR_BIT(DDRC,pin_num);
 2d6:	44 b3       	in	r20, 0x14	; 20
 2d8:	21 e0       	ldi	r18, 0x01	; 1
 2da:	30 e0       	ldi	r19, 0x00	; 0
 2dc:	b9 01       	movw	r22, r18
 2de:	02 c0       	rjmp	.+4      	; 0x2e4 <DIO_InitPin+0x120>
 2e0:	66 0f       	add	r22, r22
 2e2:	77 1f       	adc	r23, r23
 2e4:	9a 95       	dec	r25
 2e6:	e2 f7       	brpl	.-8      	; 0x2e0 <DIO_InitPin+0x11c>
 2e8:	cb 01       	movw	r24, r22
 2ea:	80 95       	com	r24
 2ec:	94 2f       	mov	r25, r20
 2ee:	98 23       	and	r25, r24
 2f0:	94 bb       	out	0x14, r25	; 20
			CLEAR_BIT(PORTC,pin_num);
 2f2:	95 b3       	in	r25, 0x15	; 21
 2f4:	89 23       	and	r24, r25
 2f6:	85 bb       	out	0x15, r24	; 21
			break;
 2f8:	08 95       	ret
			
			case PD:
			CLEAR_BIT(DDRD,pin_num);
 2fa:	41 b3       	in	r20, 0x11	; 17
 2fc:	21 e0       	ldi	r18, 0x01	; 1
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	b9 01       	movw	r22, r18
 302:	02 c0       	rjmp	.+4      	; 0x308 <DIO_InitPin+0x144>
 304:	66 0f       	add	r22, r22
 306:	77 1f       	adc	r23, r23
 308:	9a 95       	dec	r25
 30a:	e2 f7       	brpl	.-8      	; 0x304 <DIO_InitPin+0x140>
 30c:	cb 01       	movw	r24, r22
 30e:	80 95       	com	r24
 310:	94 2f       	mov	r25, r20
 312:	98 23       	and	r25, r24
 314:	91 bb       	out	0x11, r25	; 17
			CLEAR_BIT(PORTD,pin_num);
 316:	92 b3       	in	r25, 0x12	; 18
 318:	89 23       	and	r24, r25
 31a:	82 bb       	out	0x12, r24	; 18
			break;
 31c:	08 95       	ret
		}
		break;
		case INPULL:
		switch(port)
 31e:	81 30       	cpi	r24, 0x01	; 1
 320:	c1 f0       	breq	.+48     	; 0x352 <DIO_InitPin+0x18e>
 322:	28 f0       	brcs	.+10     	; 0x32e <DIO_InitPin+0x16a>
 324:	82 30       	cpi	r24, 0x02	; 2
 326:	39 f1       	breq	.+78     	; 0x376 <DIO_InitPin+0x1b2>
 328:	83 30       	cpi	r24, 0x03	; 3
 32a:	b9 f1       	breq	.+110    	; 0x39a <DIO_InitPin+0x1d6>
 32c:	08 95       	ret
		{
			case PA:
			CLEAR_BIT(DDRA,pin_num);
 32e:	4a b3       	in	r20, 0x1a	; 26
 330:	21 e0       	ldi	r18, 0x01	; 1
 332:	30 e0       	ldi	r19, 0x00	; 0
 334:	b9 01       	movw	r22, r18
 336:	02 c0       	rjmp	.+4      	; 0x33c <DIO_InitPin+0x178>
 338:	66 0f       	add	r22, r22
 33a:	77 1f       	adc	r23, r23
 33c:	9a 95       	dec	r25
 33e:	e2 f7       	brpl	.-8      	; 0x338 <DIO_InitPin+0x174>
 340:	cb 01       	movw	r24, r22
 342:	96 2f       	mov	r25, r22
 344:	90 95       	com	r25
 346:	94 23       	and	r25, r20
 348:	9a bb       	out	0x1a, r25	; 26
			SET_BIT(PORTA,pin_num);
 34a:	9b b3       	in	r25, 0x1b	; 27
 34c:	89 2b       	or	r24, r25
 34e:	8b bb       	out	0x1b, r24	; 27
			break;
 350:	08 95       	ret
			
			case PB:
			CLEAR_BIT(DDRB,pin_num);
 352:	47 b3       	in	r20, 0x17	; 23
 354:	21 e0       	ldi	r18, 0x01	; 1
 356:	30 e0       	ldi	r19, 0x00	; 0
 358:	b9 01       	movw	r22, r18
 35a:	02 c0       	rjmp	.+4      	; 0x360 <DIO_InitPin+0x19c>
 35c:	66 0f       	add	r22, r22
 35e:	77 1f       	adc	r23, r23
 360:	9a 95       	dec	r25
 362:	e2 f7       	brpl	.-8      	; 0x35c <DIO_InitPin+0x198>
 364:	cb 01       	movw	r24, r22
 366:	96 2f       	mov	r25, r22
 368:	90 95       	com	r25
 36a:	94 23       	and	r25, r20
 36c:	97 bb       	out	0x17, r25	; 23
			SET_BIT(PORTB,pin_num);
 36e:	98 b3       	in	r25, 0x18	; 24
 370:	89 2b       	or	r24, r25
 372:	88 bb       	out	0x18, r24	; 24
			break;
 374:	08 95       	ret
			
			case PC:
			CLEAR_BIT(DDRC,pin_num);
 376:	44 b3       	in	r20, 0x14	; 20
 378:	21 e0       	ldi	r18, 0x01	; 1
 37a:	30 e0       	ldi	r19, 0x00	; 0
 37c:	b9 01       	movw	r22, r18
 37e:	02 c0       	rjmp	.+4      	; 0x384 <DIO_InitPin+0x1c0>
 380:	66 0f       	add	r22, r22
 382:	77 1f       	adc	r23, r23
 384:	9a 95       	dec	r25
 386:	e2 f7       	brpl	.-8      	; 0x380 <DIO_InitPin+0x1bc>
 388:	cb 01       	movw	r24, r22
 38a:	96 2f       	mov	r25, r22
 38c:	90 95       	com	r25
 38e:	94 23       	and	r25, r20
 390:	94 bb       	out	0x14, r25	; 20
			SET_BIT(PORTC,pin_num);
 392:	95 b3       	in	r25, 0x15	; 21
 394:	89 2b       	or	r24, r25
 396:	85 bb       	out	0x15, r24	; 21
			break;
 398:	08 95       	ret
			
			case PD:
			CLEAR_BIT(DDRD,pin_num);
 39a:	41 b3       	in	r20, 0x11	; 17
 39c:	21 e0       	ldi	r18, 0x01	; 1
 39e:	30 e0       	ldi	r19, 0x00	; 0
 3a0:	b9 01       	movw	r22, r18
 3a2:	02 c0       	rjmp	.+4      	; 0x3a8 <DIO_InitPin+0x1e4>
 3a4:	66 0f       	add	r22, r22
 3a6:	77 1f       	adc	r23, r23
 3a8:	9a 95       	dec	r25
 3aa:	e2 f7       	brpl	.-8      	; 0x3a4 <DIO_InitPin+0x1e0>
 3ac:	cb 01       	movw	r24, r22
 3ae:	96 2f       	mov	r25, r22
 3b0:	90 95       	com	r25
 3b2:	94 23       	and	r25, r20
 3b4:	91 bb       	out	0x11, r25	; 17
			SET_BIT(PORTD,pin_num);
 3b6:	92 b3       	in	r25, 0x12	; 18
 3b8:	89 2b       	or	r24, r25
 3ba:	82 bb       	out	0x12, r24	; 18
 3bc:	08 95       	ret

000003be <DIO_Init>:
#include "DIO.h"
#include "DIO_Private.h"
#include "DIO_Cfg.h"

void DIO_Init(void)
{
 3be:	cf 93       	push	r28
	DIO_Pin_type i;
	for(i=PINA0; i<TOTAL_PINS; i++)
 3c0:	c0 e0       	ldi	r28, 0x00	; 0
 3c2:	09 c0       	rjmp	.+18     	; 0x3d6 <DIO_Init+0x18>
	{
		DIO_InitPin(i,DIO_PinsStatusArr[i]);
 3c4:	ec 2f       	mov	r30, r28
 3c6:	f0 e0       	ldi	r31, 0x00	; 0
 3c8:	ea 59       	subi	r30, 0x9A	; 154
 3ca:	ff 4f       	sbci	r31, 0xFF	; 255
 3cc:	60 81       	ld	r22, Z
 3ce:	8c 2f       	mov	r24, r28
 3d0:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <DIO_InitPin>
#include "DIO_Cfg.h"

void DIO_Init(void)
{
	DIO_Pin_type i;
	for(i=PINA0; i<TOTAL_PINS; i++)
 3d4:	cf 5f       	subi	r28, 0xFF	; 255
 3d6:	c0 32       	cpi	r28, 0x20	; 32
 3d8:	a8 f3       	brcs	.-22     	; 0x3c4 <DIO_Init+0x6>
	{
		DIO_InitPin(i,DIO_PinsStatusArr[i]);
	}
}
 3da:	cf 91       	pop	r28
 3dc:	08 95       	ret

000003de <DIO_WritePin>:
}


void DIO_WritePin(DIO_Pin_type pin, DIO_PinVoltage_type volt)
{
	u8 pin_num = pin%8;
 3de:	98 2f       	mov	r25, r24
 3e0:	97 70       	andi	r25, 0x07	; 7
	DIO_Port_type port = pin/8;
 3e2:	86 95       	lsr	r24
 3e4:	86 95       	lsr	r24
 3e6:	86 95       	lsr	r24
	
	if(volt == HIGH)
 3e8:	61 30       	cpi	r22, 0x01	; 1
 3ea:	e1 f5       	brne	.+120    	; 0x464 <__EEPROM_REGION_LENGTH__+0x64>
	{
		switch(port)
 3ec:	81 30       	cpi	r24, 0x01	; 1
 3ee:	99 f0       	breq	.+38     	; 0x416 <__EEPROM_REGION_LENGTH__+0x16>
 3f0:	28 f0       	brcs	.+10     	; 0x3fc <DIO_WritePin+0x1e>
 3f2:	82 30       	cpi	r24, 0x02	; 2
 3f4:	e9 f0       	breq	.+58     	; 0x430 <__EEPROM_REGION_LENGTH__+0x30>
 3f6:	83 30       	cpi	r24, 0x03	; 3
 3f8:	41 f1       	breq	.+80     	; 0x44a <__EEPROM_REGION_LENGTH__+0x4a>
 3fa:	08 95       	ret
		{
			case PA:
			SET_BIT(PORTA,pin_num);
 3fc:	4b b3       	in	r20, 0x1b	; 27
 3fe:	21 e0       	ldi	r18, 0x01	; 1
 400:	30 e0       	ldi	r19, 0x00	; 0
 402:	b9 01       	movw	r22, r18
 404:	02 c0       	rjmp	.+4      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 406:	66 0f       	add	r22, r22
 408:	77 1f       	adc	r23, r23
 40a:	9a 95       	dec	r25
 40c:	e2 f7       	brpl	.-8      	; 0x406 <__EEPROM_REGION_LENGTH__+0x6>
 40e:	cb 01       	movw	r24, r22
 410:	84 2b       	or	r24, r20
 412:	8b bb       	out	0x1b, r24	; 27
			break;
 414:	08 95       	ret
			
			case PB:
			SET_BIT(PORTB,pin_num);
 416:	48 b3       	in	r20, 0x18	; 24
 418:	21 e0       	ldi	r18, 0x01	; 1
 41a:	30 e0       	ldi	r19, 0x00	; 0
 41c:	b9 01       	movw	r22, r18
 41e:	02 c0       	rjmp	.+4      	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 420:	66 0f       	add	r22, r22
 422:	77 1f       	adc	r23, r23
 424:	9a 95       	dec	r25
 426:	e2 f7       	brpl	.-8      	; 0x420 <__EEPROM_REGION_LENGTH__+0x20>
 428:	cb 01       	movw	r24, r22
 42a:	84 2b       	or	r24, r20
 42c:	88 bb       	out	0x18, r24	; 24
			break;
 42e:	08 95       	ret
			
			case PC:
			SET_BIT(PORTC,pin_num);
 430:	45 b3       	in	r20, 0x15	; 21
 432:	21 e0       	ldi	r18, 0x01	; 1
 434:	30 e0       	ldi	r19, 0x00	; 0
 436:	b9 01       	movw	r22, r18
 438:	02 c0       	rjmp	.+4      	; 0x43e <__EEPROM_REGION_LENGTH__+0x3e>
 43a:	66 0f       	add	r22, r22
 43c:	77 1f       	adc	r23, r23
 43e:	9a 95       	dec	r25
 440:	e2 f7       	brpl	.-8      	; 0x43a <__EEPROM_REGION_LENGTH__+0x3a>
 442:	cb 01       	movw	r24, r22
 444:	84 2b       	or	r24, r20
 446:	85 bb       	out	0x15, r24	; 21
			break;
 448:	08 95       	ret
			
			case PD:
			SET_BIT(PORTD,pin_num);
 44a:	42 b3       	in	r20, 0x12	; 18
 44c:	21 e0       	ldi	r18, 0x01	; 1
 44e:	30 e0       	ldi	r19, 0x00	; 0
 450:	b9 01       	movw	r22, r18
 452:	02 c0       	rjmp	.+4      	; 0x458 <__EEPROM_REGION_LENGTH__+0x58>
 454:	66 0f       	add	r22, r22
 456:	77 1f       	adc	r23, r23
 458:	9a 95       	dec	r25
 45a:	e2 f7       	brpl	.-8      	; 0x454 <__EEPROM_REGION_LENGTH__+0x54>
 45c:	cb 01       	movw	r24, r22
 45e:	84 2b       	or	r24, r20
 460:	82 bb       	out	0x12, r24	; 18
			break;
 462:	08 95       	ret
		}
	}
	else
	{
		switch(port)
 464:	81 30       	cpi	r24, 0x01	; 1
 466:	a1 f0       	breq	.+40     	; 0x490 <__EEPROM_REGION_LENGTH__+0x90>
 468:	28 f0       	brcs	.+10     	; 0x474 <__EEPROM_REGION_LENGTH__+0x74>
 46a:	82 30       	cpi	r24, 0x02	; 2
 46c:	f9 f0       	breq	.+62     	; 0x4ac <__EEPROM_REGION_LENGTH__+0xac>
 46e:	83 30       	cpi	r24, 0x03	; 3
 470:	59 f1       	breq	.+86     	; 0x4c8 <__EEPROM_REGION_LENGTH__+0xc8>
 472:	08 95       	ret
		{
			case PA:
			CLEAR_BIT(PORTA,pin_num);
 474:	4b b3       	in	r20, 0x1b	; 27
 476:	21 e0       	ldi	r18, 0x01	; 1
 478:	30 e0       	ldi	r19, 0x00	; 0
 47a:	b9 01       	movw	r22, r18
 47c:	02 c0       	rjmp	.+4      	; 0x482 <__EEPROM_REGION_LENGTH__+0x82>
 47e:	66 0f       	add	r22, r22
 480:	77 1f       	adc	r23, r23
 482:	9a 95       	dec	r25
 484:	e2 f7       	brpl	.-8      	; 0x47e <__EEPROM_REGION_LENGTH__+0x7e>
 486:	cb 01       	movw	r24, r22
 488:	80 95       	com	r24
 48a:	84 23       	and	r24, r20
 48c:	8b bb       	out	0x1b, r24	; 27
			break;
 48e:	08 95       	ret
			
			case PB:
			CLEAR_BIT(PORTB,pin_num);
 490:	48 b3       	in	r20, 0x18	; 24
 492:	21 e0       	ldi	r18, 0x01	; 1
 494:	30 e0       	ldi	r19, 0x00	; 0
 496:	b9 01       	movw	r22, r18
 498:	02 c0       	rjmp	.+4      	; 0x49e <__EEPROM_REGION_LENGTH__+0x9e>
 49a:	66 0f       	add	r22, r22
 49c:	77 1f       	adc	r23, r23
 49e:	9a 95       	dec	r25
 4a0:	e2 f7       	brpl	.-8      	; 0x49a <__EEPROM_REGION_LENGTH__+0x9a>
 4a2:	cb 01       	movw	r24, r22
 4a4:	80 95       	com	r24
 4a6:	84 23       	and	r24, r20
 4a8:	88 bb       	out	0x18, r24	; 24
			break;
 4aa:	08 95       	ret
			
			case PC:
			CLEAR_BIT(PORTC,pin_num);
 4ac:	45 b3       	in	r20, 0x15	; 21
 4ae:	21 e0       	ldi	r18, 0x01	; 1
 4b0:	30 e0       	ldi	r19, 0x00	; 0
 4b2:	b9 01       	movw	r22, r18
 4b4:	02 c0       	rjmp	.+4      	; 0x4ba <__EEPROM_REGION_LENGTH__+0xba>
 4b6:	66 0f       	add	r22, r22
 4b8:	77 1f       	adc	r23, r23
 4ba:	9a 95       	dec	r25
 4bc:	e2 f7       	brpl	.-8      	; 0x4b6 <__EEPROM_REGION_LENGTH__+0xb6>
 4be:	cb 01       	movw	r24, r22
 4c0:	80 95       	com	r24
 4c2:	84 23       	and	r24, r20
 4c4:	85 bb       	out	0x15, r24	; 21
			break;
 4c6:	08 95       	ret
			
			case PD:
			CLEAR_BIT(PORTD,pin_num);
 4c8:	42 b3       	in	r20, 0x12	; 18
 4ca:	21 e0       	ldi	r18, 0x01	; 1
 4cc:	30 e0       	ldi	r19, 0x00	; 0
 4ce:	b9 01       	movw	r22, r18
 4d0:	02 c0       	rjmp	.+4      	; 0x4d6 <__EEPROM_REGION_LENGTH__+0xd6>
 4d2:	66 0f       	add	r22, r22
 4d4:	77 1f       	adc	r23, r23
 4d6:	9a 95       	dec	r25
 4d8:	e2 f7       	brpl	.-8      	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 4da:	cb 01       	movw	r24, r22
 4dc:	80 95       	com	r24
 4de:	84 23       	and	r24, r20
 4e0:	82 bb       	out	0x12, r24	; 18
 4e2:	08 95       	ret

000004e4 <SPI_Init>:
{
	SPDR=data;
}
void SPI_SetCallBack(void (*LocalFptr)(void))
{
	SPI_Fptr = LocalFptr;
 4e4:	81 11       	cpse	r24, r1
 4e6:	04 c0       	rjmp	.+8      	; 0x4f0 <SPI_Init+0xc>
 4e8:	8d b1       	in	r24, 0x0d	; 13
 4ea:	80 61       	ori	r24, 0x10	; 16
 4ec:	8d b9       	out	0x0d, r24	; 13
 4ee:	03 c0       	rjmp	.+6      	; 0x4f6 <SPI_Init+0x12>
 4f0:	8d b1       	in	r24, 0x0d	; 13
 4f2:	8f 7e       	andi	r24, 0xEF	; 239
 4f4:	8d b9       	out	0x0d, r24	; 13
 4f6:	8d b1       	in	r24, 0x0d	; 13
 4f8:	80 64       	ori	r24, 0x40	; 64
 4fa:	8d b9       	out	0x0d, r24	; 13
 4fc:	8d b1       	in	r24, 0x0d	; 13
 4fe:	80 68       	ori	r24, 0x80	; 128
 500:	8d b9       	out	0x0d, r24	; 13
 502:	08 95       	ret

00000504 <SPI_SendReceive>:
 504:	8f b9       	out	0x0f, r24	; 15
 506:	77 9b       	sbis	0x0e, 7	; 14
 508:	fe cf       	rjmp	.-4      	; 0x506 <SPI_SendReceive+0x2>
 50a:	8f b1       	in	r24, 0x0f	; 15
 50c:	08 95       	ret

0000050e <__vector_12>:
}
ISR(SPI_STC_vect)
{
 50e:	1f 92       	push	r1
 510:	0f 92       	push	r0
 512:	0f b6       	in	r0, 0x3f	; 63
 514:	0f 92       	push	r0
 516:	11 24       	eor	r1, r1
 518:	2f 93       	push	r18
 51a:	3f 93       	push	r19
 51c:	4f 93       	push	r20
 51e:	5f 93       	push	r21
 520:	6f 93       	push	r22
 522:	7f 93       	push	r23
 524:	8f 93       	push	r24
 526:	9f 93       	push	r25
 528:	af 93       	push	r26
 52a:	bf 93       	push	r27
 52c:	ef 93       	push	r30
 52e:	ff 93       	push	r31
	if (SPI_Fptr!=NULLPTR)
 530:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 534:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 538:	e2 30       	cpi	r30, 0x02	; 2
 53a:	f1 05       	cpc	r31, r1
 53c:	09 f0       	breq	.+2      	; 0x540 <__vector_12+0x32>
	{
		SPI_Fptr();
 53e:	09 95       	icall
	}
 540:	ff 91       	pop	r31
 542:	ef 91       	pop	r30
 544:	bf 91       	pop	r27
 546:	af 91       	pop	r26
 548:	9f 91       	pop	r25
 54a:	8f 91       	pop	r24
 54c:	7f 91       	pop	r23
 54e:	6f 91       	pop	r22
 550:	5f 91       	pop	r21
 552:	4f 91       	pop	r20
 554:	3f 91       	pop	r19
 556:	2f 91       	pop	r18
 558:	0f 90       	pop	r0
 55a:	0f be       	out	0x3f, r0	; 63
 55c:	0f 90       	pop	r0
 55e:	1f 90       	pop	r1
 560:	18 95       	reti

00000562 <UART_Init>:
	UART_RX_Fptr = LocalFptr;
}

void UART_TX_SetCallBack(void (*LocalFptr)(void))
{
	UART_TX_Fptr = LocalFptr;
 562:	83 e3       	ldi	r24, 0x33	; 51
 564:	89 b9       	out	0x09, r24	; 9
 566:	8b b1       	in	r24, 0x0b	; 11
 568:	8d 7f       	andi	r24, 0xFD	; 253
 56a:	8b b9       	out	0x0b, r24	; 11
 56c:	8a b1       	in	r24, 0x0a	; 10
 56e:	80 61       	ori	r24, 0x10	; 16
 570:	8a b9       	out	0x0a, r24	; 10
 572:	8a b1       	in	r24, 0x0a	; 10
 574:	88 60       	ori	r24, 0x08	; 8
 576:	8a b9       	out	0x0a, r24	; 10
 578:	08 95       	ret

0000057a <UART_Receive>:
 57a:	5f 9b       	sbis	0x0b, 7	; 11
 57c:	fe cf       	rjmp	.-4      	; 0x57a <UART_Receive>
 57e:	8c b1       	in	r24, 0x0c	; 12
 580:	08 95       	ret

00000582 <UART_RX_InterruptEnable>:
 582:	8a b1       	in	r24, 0x0a	; 10
 584:	80 68       	ori	r24, 0x80	; 128
 586:	8a b9       	out	0x0a, r24	; 10
 588:	08 95       	ret

0000058a <UART_RX_SetCallBack>:
 58a:	90 93 65 00 	sts	0x0065, r25	; 0x800065 <UART_RX_Fptr+0x1>
 58e:	80 93 64 00 	sts	0x0064, r24	; 0x800064 <UART_RX_Fptr>
 592:	08 95       	ret

00000594 <__vector_13>:
}

ISR(UART_RXC_vect)
{
 594:	1f 92       	push	r1
 596:	0f 92       	push	r0
 598:	0f b6       	in	r0, 0x3f	; 63
 59a:	0f 92       	push	r0
 59c:	11 24       	eor	r1, r1
 59e:	2f 93       	push	r18
 5a0:	3f 93       	push	r19
 5a2:	4f 93       	push	r20
 5a4:	5f 93       	push	r21
 5a6:	6f 93       	push	r22
 5a8:	7f 93       	push	r23
 5aa:	8f 93       	push	r24
 5ac:	9f 93       	push	r25
 5ae:	af 93       	push	r26
 5b0:	bf 93       	push	r27
 5b2:	ef 93       	push	r30
 5b4:	ff 93       	push	r31
	if (UART_RX_Fptr!=NULLPTR)
 5b6:	e0 91 64 00 	lds	r30, 0x0064	; 0x800064 <UART_RX_Fptr>
 5ba:	f0 91 65 00 	lds	r31, 0x0065	; 0x800065 <UART_RX_Fptr+0x1>
 5be:	e2 30       	cpi	r30, 0x02	; 2
 5c0:	f1 05       	cpc	r31, r1
 5c2:	09 f0       	breq	.+2      	; 0x5c6 <__vector_13+0x32>
	{
		UART_RX_Fptr();
 5c4:	09 95       	icall
	}
}
 5c6:	ff 91       	pop	r31
 5c8:	ef 91       	pop	r30
 5ca:	bf 91       	pop	r27
 5cc:	af 91       	pop	r26
 5ce:	9f 91       	pop	r25
 5d0:	8f 91       	pop	r24
 5d2:	7f 91       	pop	r23
 5d4:	6f 91       	pop	r22
 5d6:	5f 91       	pop	r21
 5d8:	4f 91       	pop	r20
 5da:	3f 91       	pop	r19
 5dc:	2f 91       	pop	r18
 5de:	0f 90       	pop	r0
 5e0:	0f be       	out	0x3f, r0	; 63
 5e2:	0f 90       	pop	r0
 5e4:	1f 90       	pop	r1
 5e6:	18 95       	reti

000005e8 <__vector_15>:

ISR(UART_TXC_vect)
{
 5e8:	1f 92       	push	r1
 5ea:	0f 92       	push	r0
 5ec:	0f b6       	in	r0, 0x3f	; 63
 5ee:	0f 92       	push	r0
 5f0:	11 24       	eor	r1, r1
 5f2:	2f 93       	push	r18
 5f4:	3f 93       	push	r19
 5f6:	4f 93       	push	r20
 5f8:	5f 93       	push	r21
 5fa:	6f 93       	push	r22
 5fc:	7f 93       	push	r23
 5fe:	8f 93       	push	r24
 600:	9f 93       	push	r25
 602:	af 93       	push	r26
 604:	bf 93       	push	r27
 606:	ef 93       	push	r30
 608:	ff 93       	push	r31
	if (UART_TX_Fptr!=NULLPTR)
 60a:	e0 91 62 00 	lds	r30, 0x0062	; 0x800062 <UART_TX_Fptr>
 60e:	f0 91 63 00 	lds	r31, 0x0063	; 0x800063 <UART_TX_Fptr+0x1>
 612:	e2 30       	cpi	r30, 0x02	; 2
 614:	f1 05       	cpc	r31, r1
 616:	09 f0       	breq	.+2      	; 0x61a <__vector_15+0x32>
	{
		UART_TX_Fptr();
 618:	09 95       	icall
	}
 61a:	ff 91       	pop	r31
 61c:	ef 91       	pop	r30
 61e:	bf 91       	pop	r27
 620:	af 91       	pop	r26
 622:	9f 91       	pop	r25
 624:	8f 91       	pop	r24
 626:	7f 91       	pop	r23
 628:	6f 91       	pop	r22
 62a:	5f 91       	pop	r21
 62c:	4f 91       	pop	r20
 62e:	3f 91       	pop	r19
 630:	2f 91       	pop	r18
 632:	0f 90       	pop	r0
 634:	0f be       	out	0x3f, r0	; 63
 636:	0f 90       	pop	r0
 638:	1f 90       	pop	r1
 63a:	18 95       	reti

0000063c <_exit>:
 63c:	f8 94       	cli

0000063e <__stop_program>:
 63e:	ff cf       	rjmp	.-2      	; 0x63e <__stop_program>

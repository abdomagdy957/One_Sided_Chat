
Lec_4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000006be  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000022  00800060  000006be  00000752  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000002  00800082  00800082  00000774  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000774  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000007a4  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  000007e0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001c99  00000000  00000000  00000968  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00000b4a  00000000  00000000  00002601  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000ce4  00000000  00000000  0000314b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  000003c8  00000000  00000000  00003e30  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    00000749  00000000  00000000  000041f8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00001762  00000000  00000000  00004941  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000130  00000000  00000000  000060a3  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 33 03 	jmp	0x666	; 0x666 <__vector_12>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ee eb       	ldi	r30, 0xBE	; 190
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a2 38       	cpi	r26, 0x82	; 130
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>

00000076 <__do_clear_bss>:
  76:	20 e0       	ldi	r18, 0x00	; 0
  78:	a2 e8       	ldi	r26, 0x82	; 130
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 38       	cpi	r26, 0x84	; 132
  82:	b2 07       	cpc	r27, r18
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 7c 01 	call	0x2f8	; 0x2f8 <main>
  8a:	0c 94 5d 03 	jmp	0x6ba	; 0x6ba <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <WriteInst>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  92:	cf 93       	push	r28
  94:	c8 2f       	mov	r28, r24
  96:	60 e0       	ldi	r22, 0x00	; 0
  98:	83 e0       	ldi	r24, 0x03	; 3
  9a:	0e 94 96 02 	call	0x52c	; 0x52c <DIO_WritePin>
  9e:	6c 2f       	mov	r22, r28
  a0:	66 1f       	adc	r22, r22
  a2:	66 27       	eor	r22, r22
  a4:	66 1f       	adc	r22, r22
  a6:	8a e0       	ldi	r24, 0x0A	; 10
  a8:	0e 94 96 02 	call	0x52c	; 0x52c <DIO_WritePin>
  ac:	c6 fb       	bst	r28, 6
  ae:	66 27       	eor	r22, r22
  b0:	60 f9       	bld	r22, 0
  b2:	8b e0       	ldi	r24, 0x0B	; 11
  b4:	0e 94 96 02 	call	0x52c	; 0x52c <DIO_WritePin>
  b8:	c5 fb       	bst	r28, 5
  ba:	66 27       	eor	r22, r22
  bc:	60 f9       	bld	r22, 0
  be:	89 e0       	ldi	r24, 0x09	; 9
  c0:	0e 94 96 02 	call	0x52c	; 0x52c <DIO_WritePin>
  c4:	c4 fb       	bst	r28, 4
  c6:	66 27       	eor	r22, r22
  c8:	60 f9       	bld	r22, 0
  ca:	88 e0       	ldi	r24, 0x08	; 8
  cc:	0e 94 96 02 	call	0x52c	; 0x52c <DIO_WritePin>
  d0:	61 e0       	ldi	r22, 0x01	; 1
  d2:	84 e0       	ldi	r24, 0x04	; 4
  d4:	0e 94 96 02 	call	0x52c	; 0x52c <DIO_WritePin>
  d8:	8f ec       	ldi	r24, 0xCF	; 207
  da:	97 e0       	ldi	r25, 0x07	; 7
  dc:	01 97       	sbiw	r24, 0x01	; 1
  de:	f1 f7       	brne	.-4      	; 0xdc <WriteInst+0x4a>
  e0:	00 c0       	rjmp	.+0      	; 0xe2 <WriteInst+0x50>
  e2:	00 00       	nop
  e4:	60 e0       	ldi	r22, 0x00	; 0
  e6:	84 e0       	ldi	r24, 0x04	; 4
  e8:	0e 94 96 02 	call	0x52c	; 0x52c <DIO_WritePin>
  ec:	8f ec       	ldi	r24, 0xCF	; 207
  ee:	97 e0       	ldi	r25, 0x07	; 7
  f0:	01 97       	sbiw	r24, 0x01	; 1
  f2:	f1 f7       	brne	.-4      	; 0xf0 <WriteInst+0x5e>
  f4:	00 c0       	rjmp	.+0      	; 0xf6 <WriteInst+0x64>
  f6:	00 00       	nop
  f8:	c3 fb       	bst	r28, 3
  fa:	66 27       	eor	r22, r22
  fc:	60 f9       	bld	r22, 0
  fe:	8a e0       	ldi	r24, 0x0A	; 10
 100:	0e 94 96 02 	call	0x52c	; 0x52c <DIO_WritePin>
 104:	c2 fb       	bst	r28, 2
 106:	66 27       	eor	r22, r22
 108:	60 f9       	bld	r22, 0
 10a:	8b e0       	ldi	r24, 0x0B	; 11
 10c:	0e 94 96 02 	call	0x52c	; 0x52c <DIO_WritePin>
 110:	c1 fb       	bst	r28, 1
 112:	66 27       	eor	r22, r22
 114:	60 f9       	bld	r22, 0
 116:	89 e0       	ldi	r24, 0x09	; 9
 118:	0e 94 96 02 	call	0x52c	; 0x52c <DIO_WritePin>
 11c:	6c 2f       	mov	r22, r28
 11e:	61 70       	andi	r22, 0x01	; 1
 120:	88 e0       	ldi	r24, 0x08	; 8
 122:	0e 94 96 02 	call	0x52c	; 0x52c <DIO_WritePin>
 126:	61 e0       	ldi	r22, 0x01	; 1
 128:	84 e0       	ldi	r24, 0x04	; 4
 12a:	0e 94 96 02 	call	0x52c	; 0x52c <DIO_WritePin>
 12e:	8f ec       	ldi	r24, 0xCF	; 207
 130:	97 e0       	ldi	r25, 0x07	; 7
 132:	01 97       	sbiw	r24, 0x01	; 1
 134:	f1 f7       	brne	.-4      	; 0x132 <WriteInst+0xa0>
 136:	00 c0       	rjmp	.+0      	; 0x138 <WriteInst+0xa6>
 138:	00 00       	nop
 13a:	60 e0       	ldi	r22, 0x00	; 0
 13c:	84 e0       	ldi	r24, 0x04	; 4
 13e:	0e 94 96 02 	call	0x52c	; 0x52c <DIO_WritePin>
 142:	8f ec       	ldi	r24, 0xCF	; 207
 144:	97 e0       	ldi	r25, 0x07	; 7
 146:	01 97       	sbiw	r24, 0x01	; 1
 148:	f1 f7       	brne	.-4      	; 0x146 <WriteInst+0xb4>
 14a:	00 c0       	rjmp	.+0      	; 0x14c <WriteInst+0xba>
 14c:	00 00       	nop
 14e:	cf 91       	pop	r28
 150:	08 95       	ret

00000152 <WriteData>:
 152:	cf 93       	push	r28
 154:	c8 2f       	mov	r28, r24
 156:	61 e0       	ldi	r22, 0x01	; 1
 158:	83 e0       	ldi	r24, 0x03	; 3
 15a:	0e 94 96 02 	call	0x52c	; 0x52c <DIO_WritePin>
 15e:	6c 2f       	mov	r22, r28
 160:	66 1f       	adc	r22, r22
 162:	66 27       	eor	r22, r22
 164:	66 1f       	adc	r22, r22
 166:	8a e0       	ldi	r24, 0x0A	; 10
 168:	0e 94 96 02 	call	0x52c	; 0x52c <DIO_WritePin>
 16c:	c6 fb       	bst	r28, 6
 16e:	66 27       	eor	r22, r22
 170:	60 f9       	bld	r22, 0
 172:	8b e0       	ldi	r24, 0x0B	; 11
 174:	0e 94 96 02 	call	0x52c	; 0x52c <DIO_WritePin>
 178:	c5 fb       	bst	r28, 5
 17a:	66 27       	eor	r22, r22
 17c:	60 f9       	bld	r22, 0
 17e:	89 e0       	ldi	r24, 0x09	; 9
 180:	0e 94 96 02 	call	0x52c	; 0x52c <DIO_WritePin>
 184:	c4 fb       	bst	r28, 4
 186:	66 27       	eor	r22, r22
 188:	60 f9       	bld	r22, 0
 18a:	88 e0       	ldi	r24, 0x08	; 8
 18c:	0e 94 96 02 	call	0x52c	; 0x52c <DIO_WritePin>
 190:	61 e0       	ldi	r22, 0x01	; 1
 192:	84 e0       	ldi	r24, 0x04	; 4
 194:	0e 94 96 02 	call	0x52c	; 0x52c <DIO_WritePin>
 198:	8f ec       	ldi	r24, 0xCF	; 207
 19a:	97 e0       	ldi	r25, 0x07	; 7
 19c:	01 97       	sbiw	r24, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <WriteData+0x4a>
 1a0:	00 c0       	rjmp	.+0      	; 0x1a2 <WriteData+0x50>
 1a2:	00 00       	nop
 1a4:	60 e0       	ldi	r22, 0x00	; 0
 1a6:	84 e0       	ldi	r24, 0x04	; 4
 1a8:	0e 94 96 02 	call	0x52c	; 0x52c <DIO_WritePin>
 1ac:	8f ec       	ldi	r24, 0xCF	; 207
 1ae:	97 e0       	ldi	r25, 0x07	; 7
 1b0:	01 97       	sbiw	r24, 0x01	; 1
 1b2:	f1 f7       	brne	.-4      	; 0x1b0 <WriteData+0x5e>
 1b4:	00 c0       	rjmp	.+0      	; 0x1b6 <WriteData+0x64>
 1b6:	00 00       	nop
 1b8:	c3 fb       	bst	r28, 3
 1ba:	66 27       	eor	r22, r22
 1bc:	60 f9       	bld	r22, 0
 1be:	8a e0       	ldi	r24, 0x0A	; 10
 1c0:	0e 94 96 02 	call	0x52c	; 0x52c <DIO_WritePin>
 1c4:	c2 fb       	bst	r28, 2
 1c6:	66 27       	eor	r22, r22
 1c8:	60 f9       	bld	r22, 0
 1ca:	8b e0       	ldi	r24, 0x0B	; 11
 1cc:	0e 94 96 02 	call	0x52c	; 0x52c <DIO_WritePin>
 1d0:	c1 fb       	bst	r28, 1
 1d2:	66 27       	eor	r22, r22
 1d4:	60 f9       	bld	r22, 0
 1d6:	89 e0       	ldi	r24, 0x09	; 9
 1d8:	0e 94 96 02 	call	0x52c	; 0x52c <DIO_WritePin>
 1dc:	6c 2f       	mov	r22, r28
 1de:	61 70       	andi	r22, 0x01	; 1
 1e0:	88 e0       	ldi	r24, 0x08	; 8
 1e2:	0e 94 96 02 	call	0x52c	; 0x52c <DIO_WritePin>
 1e6:	61 e0       	ldi	r22, 0x01	; 1
 1e8:	84 e0       	ldi	r24, 0x04	; 4
 1ea:	0e 94 96 02 	call	0x52c	; 0x52c <DIO_WritePin>
 1ee:	8f ec       	ldi	r24, 0xCF	; 207
 1f0:	97 e0       	ldi	r25, 0x07	; 7
 1f2:	01 97       	sbiw	r24, 0x01	; 1
 1f4:	f1 f7       	brne	.-4      	; 0x1f2 <WriteData+0xa0>
 1f6:	00 c0       	rjmp	.+0      	; 0x1f8 <WriteData+0xa6>
 1f8:	00 00       	nop
 1fa:	60 e0       	ldi	r22, 0x00	; 0
 1fc:	84 e0       	ldi	r24, 0x04	; 4
 1fe:	0e 94 96 02 	call	0x52c	; 0x52c <DIO_WritePin>
 202:	8f ec       	ldi	r24, 0xCF	; 207
 204:	97 e0       	ldi	r25, 0x07	; 7
 206:	01 97       	sbiw	r24, 0x01	; 1
 208:	f1 f7       	brne	.-4      	; 0x206 <WriteData+0xb4>
 20a:	00 c0       	rjmp	.+0      	; 0x20c <WriteData+0xba>
 20c:	00 00       	nop
 20e:	cf 91       	pop	r28
 210:	08 95       	ret

00000212 <LCD_Init>:
 212:	2f e7       	ldi	r18, 0x7F	; 127
 214:	88 e3       	ldi	r24, 0x38	; 56
 216:	91 e0       	ldi	r25, 0x01	; 1
 218:	21 50       	subi	r18, 0x01	; 1
 21a:	80 40       	sbci	r24, 0x00	; 0
 21c:	90 40       	sbci	r25, 0x00	; 0
 21e:	e1 f7       	brne	.-8      	; 0x218 <LCD_Init+0x6>
 220:	00 c0       	rjmp	.+0      	; 0x222 <LCD_Init+0x10>
 222:	00 00       	nop
 224:	82 e0       	ldi	r24, 0x02	; 2
 226:	0e 94 49 00 	call	0x92	; 0x92 <WriteInst>
 22a:	88 e2       	ldi	r24, 0x28	; 40
 22c:	0e 94 49 00 	call	0x92	; 0x92 <WriteInst>
 230:	8c e0       	ldi	r24, 0x0C	; 12
 232:	0e 94 49 00 	call	0x92	; 0x92 <WriteInst>
 236:	81 e0       	ldi	r24, 0x01	; 1
 238:	0e 94 49 00 	call	0x92	; 0x92 <WriteInst>
 23c:	8f ec       	ldi	r24, 0xCF	; 207
 23e:	97 e0       	ldi	r25, 0x07	; 7
 240:	01 97       	sbiw	r24, 0x01	; 1
 242:	f1 f7       	brne	.-4      	; 0x240 <LCD_Init+0x2e>
 244:	00 c0       	rjmp	.+0      	; 0x246 <LCD_Init+0x34>
 246:	00 00       	nop
 248:	86 e0       	ldi	r24, 0x06	; 6
 24a:	0e 94 49 00 	call	0x92	; 0x92 <WriteInst>
 24e:	08 95       	ret

00000250 <LCD_GoTo>:
 250:	81 11       	cpse	r24, r1
 252:	05 c0       	rjmp	.+10     	; 0x25e <LCD_GoTo+0xe>
 254:	80 e8       	ldi	r24, 0x80	; 128
 256:	86 0f       	add	r24, r22
 258:	0e 94 49 00 	call	0x92	; 0x92 <WriteInst>
 25c:	08 95       	ret
 25e:	81 30       	cpi	r24, 0x01	; 1
 260:	29 f4       	brne	.+10     	; 0x26c <LCD_GoTo+0x1c>
 262:	80 ec       	ldi	r24, 0xC0	; 192
 264:	86 0f       	add	r24, r22
 266:	0e 94 49 00 	call	0x92	; 0x92 <WriteInst>
 26a:	08 95       	ret
 26c:	82 30       	cpi	r24, 0x02	; 2
 26e:	29 f4       	brne	.+10     	; 0x27a <LCD_GoTo+0x2a>
 270:	84 e9       	ldi	r24, 0x94	; 148
 272:	86 0f       	add	r24, r22
 274:	0e 94 49 00 	call	0x92	; 0x92 <WriteInst>
 278:	08 95       	ret
 27a:	83 30       	cpi	r24, 0x03	; 3
 27c:	21 f4       	brne	.+8      	; 0x286 <LCD_GoTo+0x36>
 27e:	84 ed       	ldi	r24, 0xD4	; 212
 280:	86 0f       	add	r24, r22
 282:	0e 94 49 00 	call	0x92	; 0x92 <WriteInst>
 286:	08 95       	ret

00000288 <LCD_WriteChar>:
 288:	0e 94 a9 00 	call	0x152	; 0x152 <WriteData>
 28c:	08 95       	ret

0000028e <LCD_Clear_Position>:
{
	WriteInst(0x01);
	_delay_ms(1);
}
void LCD_Clear_Position(u8 line, u8 cell, u8 noCells)
{
 28e:	cf 93       	push	r28
 290:	df 93       	push	r29
 292:	d4 2f       	mov	r29, r20
	LCD_GoTo(line,cell);
 294:	0e 94 28 01 	call	0x250	; 0x250 <LCD_GoTo>
	for(u8 i=0; i<noCells; i++)
 298:	c0 e0       	ldi	r28, 0x00	; 0
 29a:	04 c0       	rjmp	.+8      	; 0x2a4 <LCD_Clear_Position+0x16>
	{
		LCD_WriteChar(' ');
 29c:	80 e2       	ldi	r24, 0x20	; 32
 29e:	0e 94 44 01 	call	0x288	; 0x288 <LCD_WriteChar>
	_delay_ms(1);
}
void LCD_Clear_Position(u8 line, u8 cell, u8 noCells)
{
	LCD_GoTo(line,cell);
	for(u8 i=0; i<noCells; i++)
 2a2:	cf 5f       	subi	r28, 0xFF	; 255
 2a4:	cd 17       	cp	r28, r29
 2a6:	d0 f3       	brcs	.-12     	; 0x29c <LCD_Clear_Position+0xe>
	{
		LCD_WriteChar(' ');
	}
}
 2a8:	df 91       	pop	r29
 2aa:	cf 91       	pop	r28
 2ac:	08 95       	ret

000002ae <SPI_Func>:
}

void SPI_Func(void)
{
	static u8  i=0;
	_data = SPI_SendReceive('s');
 2ae:	83 e7       	ldi	r24, 0x73	; 115
 2b0:	0e 94 29 03 	call	0x652	; 0x652 <SPI_SendReceive>
 2b4:	80 93 83 00 	sts	0x0083, r24	; 0x800083 <_data>
	if(_data == 8)
 2b8:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <_data>
 2bc:	88 30       	cpi	r24, 0x08	; 8
 2be:	69 f4       	brne	.+26     	; 0x2da <SPI_Func+0x2c>
	{
		LCD_Clear_Position(0,i-1,2);
 2c0:	60 91 82 00 	lds	r22, 0x0082	; 0x800082 <__data_end>
 2c4:	61 50       	subi	r22, 0x01	; 1
 2c6:	42 e0       	ldi	r20, 0x02	; 2
 2c8:	80 e0       	ldi	r24, 0x00	; 0
 2ca:	0e 94 47 01 	call	0x28e	; 0x28e <LCD_Clear_Position>
		i--;
 2ce:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__data_end>
 2d2:	81 50       	subi	r24, 0x01	; 1
 2d4:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__data_end>
 2d8:	08 95       	ret
	}
	else
	{
		LCD_GoTo(0,i);
 2da:	60 91 82 00 	lds	r22, 0x0082	; 0x800082 <__data_end>
 2de:	80 e0       	ldi	r24, 0x00	; 0
 2e0:	0e 94 28 01 	call	0x250	; 0x250 <LCD_GoTo>
		LCD_WriteChar(_data);
 2e4:	80 91 83 00 	lds	r24, 0x0083	; 0x800083 <_data>
 2e8:	0e 94 44 01 	call	0x288	; 0x288 <LCD_WriteChar>
		i++;
 2ec:	80 91 82 00 	lds	r24, 0x0082	; 0x800082 <__data_end>
 2f0:	8f 5f       	subi	r24, 0xFF	; 255
 2f2:	80 93 82 00 	sts	0x0082, r24	; 0x800082 <__data_end>
 2f6:	08 95       	ret

000002f8 <main>:
volatile u8 _data;
void SPI_Func(void);

int main(void)
{
	SPI_SetCallBack(SPI_Func);
 2f8:	87 e5       	ldi	r24, 0x57	; 87
 2fa:	91 e0       	ldi	r25, 0x01	; 1
 2fc:	0e 94 2e 03 	call	0x65c	; 0x65c <SPI_SetCallBack>
	DIO_Init();
 300:	0e 94 86 02 	call	0x50c	; 0x50c <DIO_Init>
	LCD_Init();
 304:	0e 94 09 01 	call	0x212	; 0x212 <LCD_Init>
	sei();
 308:	78 94       	sei
	
	SPI_Init(SLAVE);
 30a:	81 e0       	ldi	r24, 0x01	; 1
 30c:	0e 94 19 03 	call	0x632	; 0x632 <SPI_Init>
 310:	ff cf       	rjmp	.-2      	; 0x310 <main+0x18>

00000312 <DIO_InitPin>:
	}
}

static void DIO_InitPin(DIO_Pin_type pin, DIO_PinStatus_type status)
{
	u8 pin_num = pin%8;
 312:	98 2f       	mov	r25, r24
 314:	97 70       	andi	r25, 0x07	; 7
	DIO_Port_type port = pin/8;
 316:	86 95       	lsr	r24
 318:	86 95       	lsr	r24
 31a:	86 95       	lsr	r24
	switch(status)
 31c:	61 30       	cpi	r22, 0x01	; 1
 31e:	09 f4       	brne	.+2      	; 0x322 <DIO_InitPin+0x10>
 320:	55 c0       	rjmp	.+170    	; 0x3cc <DIO_InitPin+0xba>
 322:	20 f0       	brcs	.+8      	; 0x32c <DIO_InitPin+0x1a>
 324:	62 30       	cpi	r22, 0x02	; 2
 326:	09 f4       	brne	.+2      	; 0x32a <DIO_InitPin+0x18>
 328:	a1 c0       	rjmp	.+322    	; 0x46c <__EEPROM_REGION_LENGTH__+0x6c>
 32a:	08 95       	ret
	{
		case OUTPUT:
		switch(port)
 32c:	81 30       	cpi	r24, 0x01	; 1
 32e:	c1 f0       	breq	.+48     	; 0x360 <DIO_InitPin+0x4e>
 330:	28 f0       	brcs	.+10     	; 0x33c <DIO_InitPin+0x2a>
 332:	82 30       	cpi	r24, 0x02	; 2
 334:	39 f1       	breq	.+78     	; 0x384 <DIO_InitPin+0x72>
 336:	83 30       	cpi	r24, 0x03	; 3
 338:	b9 f1       	breq	.+110    	; 0x3a8 <DIO_InitPin+0x96>
 33a:	08 95       	ret
		{
			case PA:
			SET_BIT(DDRA,pin_num);
 33c:	4a b3       	in	r20, 0x1a	; 26
 33e:	21 e0       	ldi	r18, 0x01	; 1
 340:	30 e0       	ldi	r19, 0x00	; 0
 342:	b9 01       	movw	r22, r18
 344:	02 c0       	rjmp	.+4      	; 0x34a <DIO_InitPin+0x38>
 346:	66 0f       	add	r22, r22
 348:	77 1f       	adc	r23, r23
 34a:	9a 95       	dec	r25
 34c:	e2 f7       	brpl	.-8      	; 0x346 <DIO_InitPin+0x34>
 34e:	cb 01       	movw	r24, r22
 350:	94 2f       	mov	r25, r20
 352:	98 2b       	or	r25, r24
 354:	9a bb       	out	0x1a, r25	; 26
			CLEAR_BIT(PORTA,pin_num);
 356:	9b b3       	in	r25, 0x1b	; 27
 358:	80 95       	com	r24
 35a:	89 23       	and	r24, r25
 35c:	8b bb       	out	0x1b, r24	; 27
			break;
 35e:	08 95       	ret
			
			case PB:
			SET_BIT(DDRB,pin_num);
 360:	47 b3       	in	r20, 0x17	; 23
 362:	21 e0       	ldi	r18, 0x01	; 1
 364:	30 e0       	ldi	r19, 0x00	; 0
 366:	b9 01       	movw	r22, r18
 368:	02 c0       	rjmp	.+4      	; 0x36e <DIO_InitPin+0x5c>
 36a:	66 0f       	add	r22, r22
 36c:	77 1f       	adc	r23, r23
 36e:	9a 95       	dec	r25
 370:	e2 f7       	brpl	.-8      	; 0x36a <DIO_InitPin+0x58>
 372:	cb 01       	movw	r24, r22
 374:	94 2f       	mov	r25, r20
 376:	98 2b       	or	r25, r24
 378:	97 bb       	out	0x17, r25	; 23
			CLEAR_BIT(PORTB,pin_num);
 37a:	98 b3       	in	r25, 0x18	; 24
 37c:	80 95       	com	r24
 37e:	89 23       	and	r24, r25
 380:	88 bb       	out	0x18, r24	; 24
			break;
 382:	08 95       	ret
			
			case PC:
			SET_BIT(DDRC,pin_num);
 384:	44 b3       	in	r20, 0x14	; 20
 386:	21 e0       	ldi	r18, 0x01	; 1
 388:	30 e0       	ldi	r19, 0x00	; 0
 38a:	b9 01       	movw	r22, r18
 38c:	02 c0       	rjmp	.+4      	; 0x392 <DIO_InitPin+0x80>
 38e:	66 0f       	add	r22, r22
 390:	77 1f       	adc	r23, r23
 392:	9a 95       	dec	r25
 394:	e2 f7       	brpl	.-8      	; 0x38e <DIO_InitPin+0x7c>
 396:	cb 01       	movw	r24, r22
 398:	94 2f       	mov	r25, r20
 39a:	98 2b       	or	r25, r24
 39c:	94 bb       	out	0x14, r25	; 20
			CLEAR_BIT(PORTC,pin_num);
 39e:	95 b3       	in	r25, 0x15	; 21
 3a0:	80 95       	com	r24
 3a2:	89 23       	and	r24, r25
 3a4:	85 bb       	out	0x15, r24	; 21
			break;
 3a6:	08 95       	ret
			
			case PD:
			SET_BIT(DDRD,pin_num);
 3a8:	41 b3       	in	r20, 0x11	; 17
 3aa:	21 e0       	ldi	r18, 0x01	; 1
 3ac:	30 e0       	ldi	r19, 0x00	; 0
 3ae:	b9 01       	movw	r22, r18
 3b0:	02 c0       	rjmp	.+4      	; 0x3b6 <DIO_InitPin+0xa4>
 3b2:	66 0f       	add	r22, r22
 3b4:	77 1f       	adc	r23, r23
 3b6:	9a 95       	dec	r25
 3b8:	e2 f7       	brpl	.-8      	; 0x3b2 <DIO_InitPin+0xa0>
 3ba:	cb 01       	movw	r24, r22
 3bc:	94 2f       	mov	r25, r20
 3be:	98 2b       	or	r25, r24
 3c0:	91 bb       	out	0x11, r25	; 17
			CLEAR_BIT(PORTD,pin_num);
 3c2:	92 b3       	in	r25, 0x12	; 18
 3c4:	80 95       	com	r24
 3c6:	89 23       	and	r24, r25
 3c8:	82 bb       	out	0x12, r24	; 18
			break;
 3ca:	08 95       	ret
		}
		break;
		
		case INFREE:
		switch(port)
 3cc:	81 30       	cpi	r24, 0x01	; 1
 3ce:	c1 f0       	breq	.+48     	; 0x400 <__EEPROM_REGION_LENGTH__>
 3d0:	28 f0       	brcs	.+10     	; 0x3dc <DIO_InitPin+0xca>
 3d2:	82 30       	cpi	r24, 0x02	; 2
 3d4:	39 f1       	breq	.+78     	; 0x424 <__EEPROM_REGION_LENGTH__+0x24>
 3d6:	83 30       	cpi	r24, 0x03	; 3
 3d8:	b9 f1       	breq	.+110    	; 0x448 <__EEPROM_REGION_LENGTH__+0x48>
 3da:	08 95       	ret
		{
			case PA:
			CLEAR_BIT(DDRA,pin_num);
 3dc:	4a b3       	in	r20, 0x1a	; 26
 3de:	21 e0       	ldi	r18, 0x01	; 1
 3e0:	30 e0       	ldi	r19, 0x00	; 0
 3e2:	b9 01       	movw	r22, r18
 3e4:	02 c0       	rjmp	.+4      	; 0x3ea <DIO_InitPin+0xd8>
 3e6:	66 0f       	add	r22, r22
 3e8:	77 1f       	adc	r23, r23
 3ea:	9a 95       	dec	r25
 3ec:	e2 f7       	brpl	.-8      	; 0x3e6 <DIO_InitPin+0xd4>
 3ee:	cb 01       	movw	r24, r22
 3f0:	80 95       	com	r24
 3f2:	94 2f       	mov	r25, r20
 3f4:	98 23       	and	r25, r24
 3f6:	9a bb       	out	0x1a, r25	; 26
			CLEAR_BIT(PORTA,pin_num);
 3f8:	9b b3       	in	r25, 0x1b	; 27
 3fa:	89 23       	and	r24, r25
 3fc:	8b bb       	out	0x1b, r24	; 27
			break;
 3fe:	08 95       	ret
			
			case PB:
			CLEAR_BIT(DDRB,pin_num);
 400:	47 b3       	in	r20, 0x17	; 23
 402:	21 e0       	ldi	r18, 0x01	; 1
 404:	30 e0       	ldi	r19, 0x00	; 0
 406:	b9 01       	movw	r22, r18
 408:	02 c0       	rjmp	.+4      	; 0x40e <__EEPROM_REGION_LENGTH__+0xe>
 40a:	66 0f       	add	r22, r22
 40c:	77 1f       	adc	r23, r23
 40e:	9a 95       	dec	r25
 410:	e2 f7       	brpl	.-8      	; 0x40a <__EEPROM_REGION_LENGTH__+0xa>
 412:	cb 01       	movw	r24, r22
 414:	80 95       	com	r24
 416:	94 2f       	mov	r25, r20
 418:	98 23       	and	r25, r24
 41a:	97 bb       	out	0x17, r25	; 23
			CLEAR_BIT(PORTB,pin_num);
 41c:	98 b3       	in	r25, 0x18	; 24
 41e:	89 23       	and	r24, r25
 420:	88 bb       	out	0x18, r24	; 24
			break;
 422:	08 95       	ret
			
			case PC:
			CLEAR_BIT(DDRC,pin_num);
 424:	44 b3       	in	r20, 0x14	; 20
 426:	21 e0       	ldi	r18, 0x01	; 1
 428:	30 e0       	ldi	r19, 0x00	; 0
 42a:	b9 01       	movw	r22, r18
 42c:	02 c0       	rjmp	.+4      	; 0x432 <__EEPROM_REGION_LENGTH__+0x32>
 42e:	66 0f       	add	r22, r22
 430:	77 1f       	adc	r23, r23
 432:	9a 95       	dec	r25
 434:	e2 f7       	brpl	.-8      	; 0x42e <__EEPROM_REGION_LENGTH__+0x2e>
 436:	cb 01       	movw	r24, r22
 438:	80 95       	com	r24
 43a:	94 2f       	mov	r25, r20
 43c:	98 23       	and	r25, r24
 43e:	94 bb       	out	0x14, r25	; 20
			CLEAR_BIT(PORTC,pin_num);
 440:	95 b3       	in	r25, 0x15	; 21
 442:	89 23       	and	r24, r25
 444:	85 bb       	out	0x15, r24	; 21
			break;
 446:	08 95       	ret
			
			case PD:
			CLEAR_BIT(DDRD,pin_num);
 448:	41 b3       	in	r20, 0x11	; 17
 44a:	21 e0       	ldi	r18, 0x01	; 1
 44c:	30 e0       	ldi	r19, 0x00	; 0
 44e:	b9 01       	movw	r22, r18
 450:	02 c0       	rjmp	.+4      	; 0x456 <__EEPROM_REGION_LENGTH__+0x56>
 452:	66 0f       	add	r22, r22
 454:	77 1f       	adc	r23, r23
 456:	9a 95       	dec	r25
 458:	e2 f7       	brpl	.-8      	; 0x452 <__EEPROM_REGION_LENGTH__+0x52>
 45a:	cb 01       	movw	r24, r22
 45c:	80 95       	com	r24
 45e:	94 2f       	mov	r25, r20
 460:	98 23       	and	r25, r24
 462:	91 bb       	out	0x11, r25	; 17
			CLEAR_BIT(PORTD,pin_num);
 464:	92 b3       	in	r25, 0x12	; 18
 466:	89 23       	and	r24, r25
 468:	82 bb       	out	0x12, r24	; 18
			break;
 46a:	08 95       	ret
		}
		break;
		case INPULL:
		switch(port)
 46c:	81 30       	cpi	r24, 0x01	; 1
 46e:	c1 f0       	breq	.+48     	; 0x4a0 <__EEPROM_REGION_LENGTH__+0xa0>
 470:	28 f0       	brcs	.+10     	; 0x47c <__EEPROM_REGION_LENGTH__+0x7c>
 472:	82 30       	cpi	r24, 0x02	; 2
 474:	39 f1       	breq	.+78     	; 0x4c4 <__EEPROM_REGION_LENGTH__+0xc4>
 476:	83 30       	cpi	r24, 0x03	; 3
 478:	b9 f1       	breq	.+110    	; 0x4e8 <__EEPROM_REGION_LENGTH__+0xe8>
 47a:	08 95       	ret
		{
			case PA:
			CLEAR_BIT(DDRA,pin_num);
 47c:	4a b3       	in	r20, 0x1a	; 26
 47e:	21 e0       	ldi	r18, 0x01	; 1
 480:	30 e0       	ldi	r19, 0x00	; 0
 482:	b9 01       	movw	r22, r18
 484:	02 c0       	rjmp	.+4      	; 0x48a <__EEPROM_REGION_LENGTH__+0x8a>
 486:	66 0f       	add	r22, r22
 488:	77 1f       	adc	r23, r23
 48a:	9a 95       	dec	r25
 48c:	e2 f7       	brpl	.-8      	; 0x486 <__EEPROM_REGION_LENGTH__+0x86>
 48e:	cb 01       	movw	r24, r22
 490:	96 2f       	mov	r25, r22
 492:	90 95       	com	r25
 494:	94 23       	and	r25, r20
 496:	9a bb       	out	0x1a, r25	; 26
			SET_BIT(PORTA,pin_num);
 498:	9b b3       	in	r25, 0x1b	; 27
 49a:	89 2b       	or	r24, r25
 49c:	8b bb       	out	0x1b, r24	; 27
			break;
 49e:	08 95       	ret
			
			case PB:
			CLEAR_BIT(DDRB,pin_num);
 4a0:	47 b3       	in	r20, 0x17	; 23
 4a2:	21 e0       	ldi	r18, 0x01	; 1
 4a4:	30 e0       	ldi	r19, 0x00	; 0
 4a6:	b9 01       	movw	r22, r18
 4a8:	02 c0       	rjmp	.+4      	; 0x4ae <__EEPROM_REGION_LENGTH__+0xae>
 4aa:	66 0f       	add	r22, r22
 4ac:	77 1f       	adc	r23, r23
 4ae:	9a 95       	dec	r25
 4b0:	e2 f7       	brpl	.-8      	; 0x4aa <__EEPROM_REGION_LENGTH__+0xaa>
 4b2:	cb 01       	movw	r24, r22
 4b4:	96 2f       	mov	r25, r22
 4b6:	90 95       	com	r25
 4b8:	94 23       	and	r25, r20
 4ba:	97 bb       	out	0x17, r25	; 23
			SET_BIT(PORTB,pin_num);
 4bc:	98 b3       	in	r25, 0x18	; 24
 4be:	89 2b       	or	r24, r25
 4c0:	88 bb       	out	0x18, r24	; 24
			break;
 4c2:	08 95       	ret
			
			case PC:
			CLEAR_BIT(DDRC,pin_num);
 4c4:	44 b3       	in	r20, 0x14	; 20
 4c6:	21 e0       	ldi	r18, 0x01	; 1
 4c8:	30 e0       	ldi	r19, 0x00	; 0
 4ca:	b9 01       	movw	r22, r18
 4cc:	02 c0       	rjmp	.+4      	; 0x4d2 <__EEPROM_REGION_LENGTH__+0xd2>
 4ce:	66 0f       	add	r22, r22
 4d0:	77 1f       	adc	r23, r23
 4d2:	9a 95       	dec	r25
 4d4:	e2 f7       	brpl	.-8      	; 0x4ce <__EEPROM_REGION_LENGTH__+0xce>
 4d6:	cb 01       	movw	r24, r22
 4d8:	96 2f       	mov	r25, r22
 4da:	90 95       	com	r25
 4dc:	94 23       	and	r25, r20
 4de:	94 bb       	out	0x14, r25	; 20
			SET_BIT(PORTC,pin_num);
 4e0:	95 b3       	in	r25, 0x15	; 21
 4e2:	89 2b       	or	r24, r25
 4e4:	85 bb       	out	0x15, r24	; 21
			break;
 4e6:	08 95       	ret
			
			case PD:
			CLEAR_BIT(DDRD,pin_num);
 4e8:	41 b3       	in	r20, 0x11	; 17
 4ea:	21 e0       	ldi	r18, 0x01	; 1
 4ec:	30 e0       	ldi	r19, 0x00	; 0
 4ee:	b9 01       	movw	r22, r18
 4f0:	02 c0       	rjmp	.+4      	; 0x4f6 <__EEPROM_REGION_LENGTH__+0xf6>
 4f2:	66 0f       	add	r22, r22
 4f4:	77 1f       	adc	r23, r23
 4f6:	9a 95       	dec	r25
 4f8:	e2 f7       	brpl	.-8      	; 0x4f2 <__EEPROM_REGION_LENGTH__+0xf2>
 4fa:	cb 01       	movw	r24, r22
 4fc:	96 2f       	mov	r25, r22
 4fe:	90 95       	com	r25
 500:	94 23       	and	r25, r20
 502:	91 bb       	out	0x11, r25	; 17
			SET_BIT(PORTD,pin_num);
 504:	92 b3       	in	r25, 0x12	; 18
 506:	89 2b       	or	r24, r25
 508:	82 bb       	out	0x12, r24	; 18
 50a:	08 95       	ret

0000050c <DIO_Init>:
#include "DIO.h"
#include "DIO_Private.h"
#include "DIO_Cfg.h"

void DIO_Init(void)
{
 50c:	cf 93       	push	r28
	DIO_Pin_type i;
	for(i=PINA0; i<TOTAL_PINS; i++)
 50e:	c0 e0       	ldi	r28, 0x00	; 0
 510:	09 c0       	rjmp	.+18     	; 0x524 <DIO_Init+0x18>
	{
		DIO_InitPin(i,DIO_PinsStatusArr[i]);
 512:	ec 2f       	mov	r30, r28
 514:	f0 e0       	ldi	r31, 0x00	; 0
 516:	ee 59       	subi	r30, 0x9E	; 158
 518:	ff 4f       	sbci	r31, 0xFF	; 255
 51a:	60 81       	ld	r22, Z
 51c:	8c 2f       	mov	r24, r28
 51e:	0e 94 89 01 	call	0x312	; 0x312 <DIO_InitPin>
#include "DIO_Cfg.h"

void DIO_Init(void)
{
	DIO_Pin_type i;
	for(i=PINA0; i<TOTAL_PINS; i++)
 522:	cf 5f       	subi	r28, 0xFF	; 255
 524:	c0 32       	cpi	r28, 0x20	; 32
 526:	a8 f3       	brcs	.-22     	; 0x512 <DIO_Init+0x6>
	{
		DIO_InitPin(i,DIO_PinsStatusArr[i]);
	}
}
 528:	cf 91       	pop	r28
 52a:	08 95       	ret

0000052c <DIO_WritePin>:
}


void DIO_WritePin(DIO_Pin_type pin, DIO_PinVoltage_type volt)
{
	u8 pin_num = pin%8;
 52c:	98 2f       	mov	r25, r24
 52e:	97 70       	andi	r25, 0x07	; 7
	DIO_Port_type port = pin/8;
 530:	86 95       	lsr	r24
 532:	86 95       	lsr	r24
 534:	86 95       	lsr	r24
	
	if(volt == HIGH)
 536:	61 30       	cpi	r22, 0x01	; 1
 538:	e1 f5       	brne	.+120    	; 0x5b2 <DIO_WritePin+0x86>
	{
		switch(port)
 53a:	81 30       	cpi	r24, 0x01	; 1
 53c:	99 f0       	breq	.+38     	; 0x564 <DIO_WritePin+0x38>
 53e:	28 f0       	brcs	.+10     	; 0x54a <DIO_WritePin+0x1e>
 540:	82 30       	cpi	r24, 0x02	; 2
 542:	e9 f0       	breq	.+58     	; 0x57e <DIO_WritePin+0x52>
 544:	83 30       	cpi	r24, 0x03	; 3
 546:	41 f1       	breq	.+80     	; 0x598 <DIO_WritePin+0x6c>
 548:	08 95       	ret
		{
			case PA:
			SET_BIT(PORTA,pin_num);
 54a:	4b b3       	in	r20, 0x1b	; 27
 54c:	21 e0       	ldi	r18, 0x01	; 1
 54e:	30 e0       	ldi	r19, 0x00	; 0
 550:	b9 01       	movw	r22, r18
 552:	02 c0       	rjmp	.+4      	; 0x558 <DIO_WritePin+0x2c>
 554:	66 0f       	add	r22, r22
 556:	77 1f       	adc	r23, r23
 558:	9a 95       	dec	r25
 55a:	e2 f7       	brpl	.-8      	; 0x554 <DIO_WritePin+0x28>
 55c:	cb 01       	movw	r24, r22
 55e:	84 2b       	or	r24, r20
 560:	8b bb       	out	0x1b, r24	; 27
			break;
 562:	08 95       	ret
			
			case PB:
			SET_BIT(PORTB,pin_num);
 564:	48 b3       	in	r20, 0x18	; 24
 566:	21 e0       	ldi	r18, 0x01	; 1
 568:	30 e0       	ldi	r19, 0x00	; 0
 56a:	b9 01       	movw	r22, r18
 56c:	02 c0       	rjmp	.+4      	; 0x572 <DIO_WritePin+0x46>
 56e:	66 0f       	add	r22, r22
 570:	77 1f       	adc	r23, r23
 572:	9a 95       	dec	r25
 574:	e2 f7       	brpl	.-8      	; 0x56e <DIO_WritePin+0x42>
 576:	cb 01       	movw	r24, r22
 578:	84 2b       	or	r24, r20
 57a:	88 bb       	out	0x18, r24	; 24
			break;
 57c:	08 95       	ret
			
			case PC:
			SET_BIT(PORTC,pin_num);
 57e:	45 b3       	in	r20, 0x15	; 21
 580:	21 e0       	ldi	r18, 0x01	; 1
 582:	30 e0       	ldi	r19, 0x00	; 0
 584:	b9 01       	movw	r22, r18
 586:	02 c0       	rjmp	.+4      	; 0x58c <DIO_WritePin+0x60>
 588:	66 0f       	add	r22, r22
 58a:	77 1f       	adc	r23, r23
 58c:	9a 95       	dec	r25
 58e:	e2 f7       	brpl	.-8      	; 0x588 <DIO_WritePin+0x5c>
 590:	cb 01       	movw	r24, r22
 592:	84 2b       	or	r24, r20
 594:	85 bb       	out	0x15, r24	; 21
			break;
 596:	08 95       	ret
			
			case PD:
			SET_BIT(PORTD,pin_num);
 598:	42 b3       	in	r20, 0x12	; 18
 59a:	21 e0       	ldi	r18, 0x01	; 1
 59c:	30 e0       	ldi	r19, 0x00	; 0
 59e:	b9 01       	movw	r22, r18
 5a0:	02 c0       	rjmp	.+4      	; 0x5a6 <DIO_WritePin+0x7a>
 5a2:	66 0f       	add	r22, r22
 5a4:	77 1f       	adc	r23, r23
 5a6:	9a 95       	dec	r25
 5a8:	e2 f7       	brpl	.-8      	; 0x5a2 <DIO_WritePin+0x76>
 5aa:	cb 01       	movw	r24, r22
 5ac:	84 2b       	or	r24, r20
 5ae:	82 bb       	out	0x12, r24	; 18
			break;
 5b0:	08 95       	ret
		}
	}
	else
	{
		switch(port)
 5b2:	81 30       	cpi	r24, 0x01	; 1
 5b4:	a1 f0       	breq	.+40     	; 0x5de <DIO_WritePin+0xb2>
 5b6:	28 f0       	brcs	.+10     	; 0x5c2 <DIO_WritePin+0x96>
 5b8:	82 30       	cpi	r24, 0x02	; 2
 5ba:	f9 f0       	breq	.+62     	; 0x5fa <DIO_WritePin+0xce>
 5bc:	83 30       	cpi	r24, 0x03	; 3
 5be:	59 f1       	breq	.+86     	; 0x616 <DIO_WritePin+0xea>
 5c0:	08 95       	ret
		{
			case PA:
			CLEAR_BIT(PORTA,pin_num);
 5c2:	4b b3       	in	r20, 0x1b	; 27
 5c4:	21 e0       	ldi	r18, 0x01	; 1
 5c6:	30 e0       	ldi	r19, 0x00	; 0
 5c8:	b9 01       	movw	r22, r18
 5ca:	02 c0       	rjmp	.+4      	; 0x5d0 <DIO_WritePin+0xa4>
 5cc:	66 0f       	add	r22, r22
 5ce:	77 1f       	adc	r23, r23
 5d0:	9a 95       	dec	r25
 5d2:	e2 f7       	brpl	.-8      	; 0x5cc <DIO_WritePin+0xa0>
 5d4:	cb 01       	movw	r24, r22
 5d6:	80 95       	com	r24
 5d8:	84 23       	and	r24, r20
 5da:	8b bb       	out	0x1b, r24	; 27
			break;
 5dc:	08 95       	ret
			
			case PB:
			CLEAR_BIT(PORTB,pin_num);
 5de:	48 b3       	in	r20, 0x18	; 24
 5e0:	21 e0       	ldi	r18, 0x01	; 1
 5e2:	30 e0       	ldi	r19, 0x00	; 0
 5e4:	b9 01       	movw	r22, r18
 5e6:	02 c0       	rjmp	.+4      	; 0x5ec <DIO_WritePin+0xc0>
 5e8:	66 0f       	add	r22, r22
 5ea:	77 1f       	adc	r23, r23
 5ec:	9a 95       	dec	r25
 5ee:	e2 f7       	brpl	.-8      	; 0x5e8 <DIO_WritePin+0xbc>
 5f0:	cb 01       	movw	r24, r22
 5f2:	80 95       	com	r24
 5f4:	84 23       	and	r24, r20
 5f6:	88 bb       	out	0x18, r24	; 24
			break;
 5f8:	08 95       	ret
			
			case PC:
			CLEAR_BIT(PORTC,pin_num);
 5fa:	45 b3       	in	r20, 0x15	; 21
 5fc:	21 e0       	ldi	r18, 0x01	; 1
 5fe:	30 e0       	ldi	r19, 0x00	; 0
 600:	b9 01       	movw	r22, r18
 602:	02 c0       	rjmp	.+4      	; 0x608 <DIO_WritePin+0xdc>
 604:	66 0f       	add	r22, r22
 606:	77 1f       	adc	r23, r23
 608:	9a 95       	dec	r25
 60a:	e2 f7       	brpl	.-8      	; 0x604 <DIO_WritePin+0xd8>
 60c:	cb 01       	movw	r24, r22
 60e:	80 95       	com	r24
 610:	84 23       	and	r24, r20
 612:	85 bb       	out	0x15, r24	; 21
			break;
 614:	08 95       	ret
			
			case PD:
			CLEAR_BIT(PORTD,pin_num);
 616:	42 b3       	in	r20, 0x12	; 18
 618:	21 e0       	ldi	r18, 0x01	; 1
 61a:	30 e0       	ldi	r19, 0x00	; 0
 61c:	b9 01       	movw	r22, r18
 61e:	02 c0       	rjmp	.+4      	; 0x624 <DIO_WritePin+0xf8>
 620:	66 0f       	add	r22, r22
 622:	77 1f       	adc	r23, r23
 624:	9a 95       	dec	r25
 626:	e2 f7       	brpl	.-8      	; 0x620 <DIO_WritePin+0xf4>
 628:	cb 01       	movw	r24, r22
 62a:	80 95       	com	r24
 62c:	84 23       	and	r24, r20
 62e:	82 bb       	out	0x12, r24	; 18
 630:	08 95       	ret

00000632 <SPI_Init>:
{
	return SPDR;
}
void SPI_SendNoBlock(u8 data)
{
	SPDR=data;
 632:	81 11       	cpse	r24, r1
 634:	04 c0       	rjmp	.+8      	; 0x63e <SPI_Init+0xc>
 636:	8d b1       	in	r24, 0x0d	; 13
 638:	80 61       	ori	r24, 0x10	; 16
 63a:	8d b9       	out	0x0d, r24	; 13
 63c:	03 c0       	rjmp	.+6      	; 0x644 <SPI_Init+0x12>
 63e:	8d b1       	in	r24, 0x0d	; 13
 640:	8f 7e       	andi	r24, 0xEF	; 239
 642:	8d b9       	out	0x0d, r24	; 13
 644:	8d b1       	in	r24, 0x0d	; 13
 646:	80 64       	ori	r24, 0x40	; 64
 648:	8d b9       	out	0x0d, r24	; 13
 64a:	8d b1       	in	r24, 0x0d	; 13
 64c:	80 68       	ori	r24, 0x80	; 128
 64e:	8d b9       	out	0x0d, r24	; 13
 650:	08 95       	ret

00000652 <SPI_SendReceive>:
 652:	8f b9       	out	0x0f, r24	; 15
 654:	77 9b       	sbis	0x0e, 7	; 14
 656:	fe cf       	rjmp	.-4      	; 0x654 <SPI_SendReceive+0x2>
 658:	8f b1       	in	r24, 0x0f	; 15
 65a:	08 95       	ret

0000065c <SPI_SetCallBack>:
}
void SPI_SetCallBack(void (*LocalFptr)(void))
{
	SPI_Fptr = LocalFptr;
 65c:	90 93 61 00 	sts	0x0061, r25	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 660:	80 93 60 00 	sts	0x0060, r24	; 0x800060 <__DATA_REGION_ORIGIN__>
 664:	08 95       	ret

00000666 <__vector_12>:
}
ISR(SPI_STC_vect)
{
 666:	1f 92       	push	r1
 668:	0f 92       	push	r0
 66a:	0f b6       	in	r0, 0x3f	; 63
 66c:	0f 92       	push	r0
 66e:	11 24       	eor	r1, r1
 670:	2f 93       	push	r18
 672:	3f 93       	push	r19
 674:	4f 93       	push	r20
 676:	5f 93       	push	r21
 678:	6f 93       	push	r22
 67a:	7f 93       	push	r23
 67c:	8f 93       	push	r24
 67e:	9f 93       	push	r25
 680:	af 93       	push	r26
 682:	bf 93       	push	r27
 684:	ef 93       	push	r30
 686:	ff 93       	push	r31
	if (SPI_Fptr!=NULLPTR)
 688:	e0 91 60 00 	lds	r30, 0x0060	; 0x800060 <__DATA_REGION_ORIGIN__>
 68c:	f0 91 61 00 	lds	r31, 0x0061	; 0x800061 <__DATA_REGION_ORIGIN__+0x1>
 690:	e2 30       	cpi	r30, 0x02	; 2
 692:	f1 05       	cpc	r31, r1
 694:	09 f0       	breq	.+2      	; 0x698 <__vector_12+0x32>
	{
		SPI_Fptr();
 696:	09 95       	icall
	}
 698:	ff 91       	pop	r31
 69a:	ef 91       	pop	r30
 69c:	bf 91       	pop	r27
 69e:	af 91       	pop	r26
 6a0:	9f 91       	pop	r25
 6a2:	8f 91       	pop	r24
 6a4:	7f 91       	pop	r23
 6a6:	6f 91       	pop	r22
 6a8:	5f 91       	pop	r21
 6aa:	4f 91       	pop	r20
 6ac:	3f 91       	pop	r19
 6ae:	2f 91       	pop	r18
 6b0:	0f 90       	pop	r0
 6b2:	0f be       	out	0x3f, r0	; 63
 6b4:	0f 90       	pop	r0
 6b6:	1f 90       	pop	r1
 6b8:	18 95       	reti

000006ba <_exit>:
 6ba:	f8 94       	cli

000006bc <__stop_program>:
 6bc:	ff cf       	rjmp	.-2      	; 0x6bc <__stop_program>
